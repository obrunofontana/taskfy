datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Project {
  id            String @id @default(uuid())
  orgId         String
  title         String
  imageId       String
  imageThumbUrl String @db.Text
  imageFullUrl  String @db.Text
  imageUserName String @db.Text
  imageLinkHTML String @db.Text

  taskColumns TaskColumn[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TaskColumn {
  id    String @id @default(uuid())
  title String
  order Int

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  tasks Task[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId])
}

model Task {
  id          String  @id @default(uuid())
  title       String
  order       Int
  description String? @db.Text

  taskColumnId String
  taskColumn   TaskColumn @relation(fields: [taskColumnId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([taskColumnId])
}

enum ACTION {
  CREATE
  UPDATE
  DELETE
}

enum ENTITY_TYPE {
  PROJECT
  TASK_COLUMN
  TASK
}

model AuditLog {
  id          String      @id @default(uuid())
  orgId       String
  action      ACTION
  entityId    String
  entityType  ENTITY_TYPE
  entityTitle String
  userId      String
  userImage   String      @db.Text
  userName    String      @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrgLimit {
  id    String @id @default(uuid())
  orgId String @unique
  count Int    @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrgSubscription {
  id    String @id @default(uuid())
  orgId String @unique

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}
